diff --git a/src/ol/Feature.js b/src/ol/Feature.js
index 42e2f4685..c976fb7f8 100644
--- a/src/ol/Feature.js
+++ b/src/ol/Feature.js
@@ -70,11 +70,11 @@ import {listen, unlistenByKey} from './events.js';
  * ```
  *
  * @api
- * @template {import("./geom/Geometry.js").default} Geometry
+ * @template {import("./geom/Geometry.js").default} G
  */
 class Feature extends BaseObject {
   /**
-   * @param {Geometry|ObjectWithGeometry<Geometry>} [opt_geometryOrProperties]
+   * @param {G|ObjectWithGeometry<G>} [opt_geometryOrProperties]
    *     You may pass a Geometry object directly, or an object literal containing
    *     properties. If you pass an object literal, you may include a Geometry
    *     associated with a `geometry` key.
@@ -136,7 +136,7 @@ class Feature extends BaseObject {
           /** @type {?} */ (opt_geometryOrProperties).getSimplifiedGeometry
         ) === 'function'
       ) {
-        const geometry = /** @type {Geometry} */ (opt_geometryOrProperties);
+        const geometry = /** @type {G} */ (opt_geometryOrProperties);
         this.setGeometry(geometry);
       } else {
         /** @type {Object<string, *>} */
@@ -149,17 +149,17 @@ class Feature extends BaseObject {
   /**
    * Clone this feature. If the original feature has a geometry it
    * is also cloned. The feature id is not set in the clone.
-   * @return {Feature<Geometry>} The clone.
+   * @return {Feature<G>} The clone.
    * @api
    */
   clone() {
-    const clone = /** @type {Feature<Geometry>} */ (
+    const clone = /** @type {Feature<G>} */ (
       new Feature(this.hasProperties() ? this.getProperties() : null)
     );
     clone.setGeometryName(this.getGeometryName());
     const geometry = this.getGeometry();
     if (geometry) {
-      clone.setGeometry(/** @type {Geometry} */ (geometry.clone()));
+      clone.setGeometry(/** @type {G} */ (geometry.clone()));
     }
     const style = this.getStyle();
     if (style) {
@@ -172,12 +172,12 @@ class Feature extends BaseObject {
    * Get the feature's default geometry.  A feature may have any number of named
    * geometries.  The "default" geometry (the one that is rendered by default) is
    * set when calling {@link module:ol/Feature~Feature#setGeometry}.
-   * @return {Geometry|undefined} The default geometry for the feature.
+   * @return {G|undefined} The default geometry for the feature.
    * @api
    * @observable
    */
   getGeometry() {
-    return /** @type {Geometry|undefined} */ (this.get(this.geometryName_));
+    return /** @type {G|undefined} */ (this.get(this.geometryName_));
   }
 
   /**
@@ -252,7 +252,7 @@ class Feature extends BaseObject {
   /**
    * Set the default geometry for the feature.  This will update the property
    * with the name returned by {@link module:ol/Feature~Feature#getGeometryName}.
-   * @param {Geometry|undefined} geometry The new geometry.
+   * @param {G|undefined} geometry The new geometry.
    * @api
    * @observable
    */
