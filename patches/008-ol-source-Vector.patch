diff --git a/src/ol/source/Vector.js b/src/ol/source/Vector.js
index 2a6ce0037..e285ee536 100644
--- a/src/ol/source/Vector.js
+++ b/src/ol/source/Vector.js
@@ -34,19 +34,19 @@ import {xhr} from '../featureloader.js';
  * @classdesc
  * Events emitted by {@link module:ol/source/Vector} instances are instances of this
  * type.
- * @template {import("../geom/Geometry.js").default} Geometry
+ * @template {import("../geom/Geometry.js").default} GeomType
  */
 export class VectorSourceEvent extends Event {
   /**
    * @param {string} type Type.
-   * @param {import("../Feature.js").default<Geometry>=} opt_feature Feature.
+   * @param {import("../Feature.js").default<GeomType>=} opt_feature Feature.
    */
   constructor(type, opt_feature) {
     super(type);
 
     /**
      * The feature being added or removed.
-     * @type {import("../Feature.js").default<Geometry>|undefined}
+     * @type {import("../Feature.js").default<GeomType>|undefined}
      * @api
      */
     this.feature = opt_feature;
@@ -150,7 +150,7 @@ export class VectorSourceEvent extends Event {
  *
  * @fires VectorSourceEvent
  * @api
- * @template {import("../geom/Geometry.js").default} Geometry
+ * @template {import("../geom/Geometry.js").default} GeomType
  */
 class VectorSource extends Source {
   /**
@@ -213,7 +213,7 @@ class VectorSource extends Source {
 
     /**
      * @private
-     * @type {RBush<import("../Feature.js").default<Geometry>>}
+     * @type {RBush<import("../Feature.js").default<GeomType>>}
      */
     this.featuresRtree_ = useSpatialIndex ? new RBush() : null;
 
@@ -225,21 +225,21 @@ class VectorSource extends Source {
 
     /**
      * @private
-     * @type {!Object<string, import("../Feature.js").default<Geometry>>}
+     * @type {!Object<string, import("../Feature.js").default<GeomType>>}
      */
     this.nullGeometryFeatures_ = {};
 
     /**
      * A lookup of features by id (the return from feature.getId()).
      * @private
-     * @type {!Object<string, import("../Feature.js").default<Geometry>>}
+     * @type {!Object<string, import("../Feature.js").default<GeomType>>}
      */
     this.idIndex_ = {};
 
     /**
      * A lookup of features by uid (using getUid(feature)).
      * @private
-     * @type {!Object<string, import("../Feature.js").default<Geometry>>}
+     * @type {!Object<string, import("../Feature.js").default<GeomType>>}
      */
     this.uidIndex_ = {};
 
@@ -251,7 +251,7 @@ class VectorSource extends Source {
 
     /**
      * @private
-     * @type {Collection<import("../Feature.js").default<Geometry>>}
+     * @type {Collection<import("../Feature.js").default<GeomType>>}
      */
     this.featuresCollection_ = null;
 
@@ -282,7 +282,7 @@ class VectorSource extends Source {
    * Note: this also applies if an {@link module:ol/Collection} is used for features,
    * meaning that if a feature with a duplicate id is added in the collection, it will
    * be removed from it right away.
-   * @param {import("../Feature.js").default<Geometry>} feature Feature to add.
+   * @param {import("../Feature.js").default<GeomType>} feature Feature to add.
    * @api
    */
   addFeature(feature) {
@@ -292,7 +292,7 @@ class VectorSource extends Source {
 
   /**
    * Add a feature without firing a `change` event.
-   * @param {import("../Feature.js").default<Geometry>} feature Feature.
+   * @param {import("../Feature.js").default<GeomType>} feature Feature.
    * @protected
    */
   addFeatureInternal(feature) {
@@ -324,7 +324,7 @@ class VectorSource extends Source {
 
   /**
    * @param {string} featureKey Unique identifier for the feature.
-   * @param {import("../Feature.js").default<Geometry>} feature The feature.
+   * @param {import("../Feature.js").default<GeomType>} feature The feature.
    * @private
    */
   setupChangeEvents_(featureKey, feature) {
@@ -341,7 +341,7 @@ class VectorSource extends Source {
 
   /**
    * @param {string} featureKey Unique identifier for the feature.
-   * @param {import("../Feature.js").default<Geometry>} feature The feature.
+   * @param {import("../Feature.js").default<GeomType>} feature The feature.
    * @return {boolean} The feature is "valid", in the sense that it is also a
    *     candidate for insertion into the Rtree.
    * @private
@@ -365,7 +365,7 @@ class VectorSource extends Source {
 
   /**
    * Add a batch of features to the source.
-   * @param {Array<import("../Feature.js").default<Geometry>>} features Features to add.
+   * @param {Array<import("../Feature.js").default<GeomType>>} features Features to add.
    * @api
    */
   addFeatures(features) {
@@ -375,7 +375,7 @@ class VectorSource extends Source {
 
   /**
    * Add features without firing a `change` event.
-   * @param {Array<import("../Feature.js").default<Geometry>>} features Features.
+   * @param {Array<import("../Feature.js").default<GeomType>>} features Features.
    * @protected
    */
   addFeaturesInternal(features) {
@@ -417,7 +417,7 @@ class VectorSource extends Source {
   }
 
   /**
-   * @param {!Collection<import("../Feature.js").default<Geometry>>} collection Collection.
+   * @param {!Collection<import("../Feature.js").default<GeomType>>} collection Collection.
    * @private
    */
   bindFeaturesCollection_(collection) {
@@ -425,7 +425,7 @@ class VectorSource extends Source {
     this.addEventListener(
       VectorEventType.ADDFEATURE,
       /**
-       * @param {VectorSourceEvent<Geometry>} evt The vector source event
+       * @param {VectorSourceEvent<GeomType>} evt The vector source event
        */
       function (evt) {
         if (!modifyingCollection) {
@@ -438,7 +438,7 @@ class VectorSource extends Source {
     this.addEventListener(
       VectorEventType.REMOVEFEATURE,
       /**
-       * @param {VectorSourceEvent<Geometry>} evt The vector source event
+       * @param {VectorSourceEvent<GeomType>} evt The vector source event
        */
       function (evt) {
         if (!modifyingCollection) {
@@ -457,7 +457,7 @@ class VectorSource extends Source {
         if (!modifyingCollection) {
           modifyingCollection = true;
           this.addFeature(
-            /** @type {import("../Feature.js").default<Geometry>} */ (evt.element)
+            /** @type {import("../Feature.js").default<GeomType>} */ (evt.element)
           );
           modifyingCollection = false;
         }
@@ -472,7 +472,7 @@ class VectorSource extends Source {
         if (!modifyingCollection) {
           modifyingCollection = true;
           this.removeFeature(
-            /** @type {import("../Feature.js").default<Geometry>} */ (evt.element)
+            /** @type {import("../Feature.js").default<GeomType>} */ (evt.element)
           );
           modifyingCollection = false;
         }
@@ -525,7 +525,7 @@ class VectorSource extends Source {
    * stop and the function will return the same value.
    * Note: this function only iterate through the feature that have a defined geometry.
    *
-   * @param {function(import("../Feature.js").default<Geometry>): T} callback Called with each feature
+   * @param {function(import("../Feature.js").default<GeomType>): T} callback Called with each feature
    *     on the source.  Return a truthy value to stop iteration.
    * @return {T|undefined} The return value from the last call to the callback.
    * @template T
@@ -546,7 +546,7 @@ class VectorSource extends Source {
    * value.
    *
    * @param {import("../coordinate.js").Coordinate} coordinate Coordinate.
-   * @param {function(import("../Feature.js").default<Geometry>): T} callback Called with each feature
+   * @param {function(import("../Feature.js").default<GeomType>): T} callback Called with each feature
    *     whose goemetry contains the provided coordinate.
    * @return {T|undefined} The return value from the last call to the callback.
    * @template T
@@ -576,7 +576,7 @@ class VectorSource extends Source {
    * features, equivalent to {@link module:ol/source/Vector~VectorSource#forEachFeature #forEachFeature()}.
    *
    * @param {import("../extent.js").Extent} extent Extent.
-   * @param {function(import("../Feature.js").default<Geometry>): T} callback Called with each feature
+   * @param {function(import("../Feature.js").default<GeomType>): T} callback Called with each feature
    *     whose bounding box intersects the provided extent.
    * @return {T|undefined} The return value from the last call to the callback.
    * @template T
@@ -599,7 +599,7 @@ class VectorSource extends Source {
    * {@link module:ol/source/Vector~VectorSource#forEachFeatureInExtent #forEachFeatureInExtent()} method instead.
    *
    * @param {import("../extent.js").Extent} extent Extent.
-   * @param {function(import("../Feature.js").default<Geometry>): T} callback Called with each feature
+   * @param {function(import("../Feature.js").default<GeomType>): T} callback Called with each feature
    *     whose geometry intersects the provided extent.
    * @return {T|undefined} The return value from the last call to the callback.
    * @template T
@@ -609,7 +609,7 @@ class VectorSource extends Source {
     return this.forEachFeatureInExtent(
       extent,
       /**
-       * @param {import("../Feature.js").default<Geometry>} feature Feature.
+       * @param {import("../Feature.js").default<GeomType>} feature Feature.
        * @return {T|undefined} The return value from the last call to the callback.
        */
       function (feature) {
@@ -628,7 +628,7 @@ class VectorSource extends Source {
    * Get the features collection associated with this source. Will be `null`
    * unless the source was configured with `useSpatialIndex` set to `false`, or
    * with an {@link module:ol/Collection} as `features`.
-   * @return {Collection<import("../Feature.js").default<Geometry>>} The collection of features.
+   * @return {Collection<import("../Feature.js").default<GeomType>>} The collection of features.
    * @api
    */
   getFeaturesCollection() {
@@ -637,7 +637,7 @@ class VectorSource extends Source {
 
   /**
    * Get all features on the source in random order.
-   * @return {Array<import("../Feature.js").default<Geometry>>} Features.
+   * @return {Array<import("../Feature.js").default<GeomType>>} Features.
    * @api
    */
   getFeatures() {
@@ -650,13 +650,13 @@ class VectorSource extends Source {
         extend(features, getValues(this.nullGeometryFeatures_));
       }
     }
-    return /** @type {Array<import("../Feature.js").default<Geometry>>} */ (features);
+    return /** @type {Array<import("../Feature.js").default<GeomType>>} */ (features);
   }
 
   /**
    * Get all features whose geometry intersects the provided coordinate.
    * @param {import("../coordinate.js").Coordinate} coordinate Coordinate.
-   * @return {Array<import("../Feature.js").default<Geometry>>} Features.
+   * @return {Array<import("../Feature.js").default<GeomType>>} Features.
    * @api
    */
   getFeaturesAtCoordinate(coordinate) {
@@ -676,7 +676,7 @@ class VectorSource extends Source {
    * features.
    *
    * @param {import("../extent.js").Extent} extent Extent.
-   * @return {Array<import("../Feature.js").default<Geometry>>} Features.
+   * @return {Array<import("../Feature.js").default<GeomType>>} Features.
    * @api
    */
   getFeaturesInExtent(extent) {
@@ -695,10 +695,10 @@ class VectorSource extends Source {
    * This method is not available when the source is configured with
    * `useSpatialIndex` set to `false`.
    * @param {import("../coordinate.js").Coordinate} coordinate Coordinate.
-   * @param {function(import("../Feature.js").default<Geometry>):boolean=} opt_filter Feature filter function.
+   * @param {function(import("../Feature.js").default<GeomType>):boolean=} opt_filter Feature filter function.
    *     The filter function will receive one argument, the {@link module:ol/Feature feature}
    *     and it should return a boolean value. By default, no filtering is made.
-   * @return {import("../Feature.js").default<Geometry>} Closest feature.
+   * @return {import("../Feature.js").default<GeomType>} Closest feature.
    * @api
    */
   getClosestFeatureToCoordinate(coordinate, opt_filter) {
@@ -719,7 +719,7 @@ class VectorSource extends Source {
     this.featuresRtree_.forEachInExtent(
       extent,
       /**
-       * @param {import("../Feature.js").default<Geometry>} feature Feature.
+       * @param {import("../Feature.js").default<GeomType>} feature Feature.
        */
       function (feature) {
         if (filter(feature)) {
@@ -769,7 +769,7 @@ class VectorSource extends Source {
    * `source.getFeatureById(2)` will return a feature with id `'2'` or `2`.
    *
    * @param {string|number} id Feature identifier.
-   * @return {import("../Feature.js").default<Geometry>} The feature (or `null` if not found).
+   * @return {import("../Feature.js").default<GeomType>} The feature (or `null` if not found).
    * @api
    */
   getFeatureById(id) {
@@ -781,7 +781,7 @@ class VectorSource extends Source {
    * Get a feature by its internal unique identifier (using `getUid`).
    *
    * @param {string} uid Feature identifier.
-   * @return {import("../Feature.js").default<Geometry>} The feature (or `null` if not found).
+   * @return {import("../Feature.js").default<GeomType>} The feature (or `null` if not found).
    */
   getFeatureByUid(uid) {
     const feature = this.uidIndex_[uid];
@@ -820,7 +820,7 @@ class VectorSource extends Source {
    * @private
    */
   handleFeatureChange_(event) {
-    const feature = /** @type {import("../Feature.js").default<Geometry>} */ (event.target);
+    const feature = /** @type {import("../Feature.js").default<GeomType>} */ (event.target);
     const featureKey = getUid(feature);
     const geometry = feature.getGeometry();
     if (!geometry) {
@@ -862,7 +862,7 @@ class VectorSource extends Source {
 
   /**
    * Returns true if the feature is contained within the source.
-   * @param {import("../Feature.js").default<Geometry>} feature Feature.
+   * @param {import("../Feature.js").default<GeomType>} feature Feature.
    * @return {boolean} Has feature.
    * @api
    */
@@ -940,7 +940,7 @@ class VectorSource extends Source {
    * Remove a single feature from the source.  If you want to remove all features
    * at once, use the {@link module:ol/source/Vector~VectorSource#clear #clear()} method
    * instead.
-   * @param {import("../Feature.js").default<Geometry>} feature Feature to remove.
+   * @param {import("../Feature.js").default<GeomType>} feature Feature to remove.
    * @api
    */
   removeFeature(feature) {
@@ -958,7 +958,7 @@ class VectorSource extends Source {
 
   /**
    * Remove feature without firing a `change` event.
-   * @param {import("../Feature.js").default<Geometry>} feature Feature.
+   * @param {import("../Feature.js").default<GeomType>} feature Feature.
    * @protected
    */
   removeFeatureInternal(feature) {
@@ -978,7 +978,7 @@ class VectorSource extends Source {
   /**
    * Remove a feature from the id index.  Called internally when the feature id
    * may have changed.
-   * @param {import("../Feature.js").default<Geometry>} feature The feature.
+   * @param {import("../Feature.js").default<GeomType>} feature The feature.
    * @return {boolean} Removed the feature from the index.
    * @private
    */
