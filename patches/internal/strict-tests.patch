diff --git a/test/accessible.ts b/test/accessible.ts
index 98c5e2b..664eedc 100644
--- a/test/accessible.ts
+++ b/test/accessible.ts
@@ -18,12 +18,12 @@ const map = new Map({
 
 (document.getElementById('zoom-out') as HTMLElement).onclick = () => {
     const view = map.getView();
-    const zoom = view.getZoom();
+    const zoom = view.getZoom()!;
     view.setZoom(zoom - 1);
 };
 
 (document.getElementById('zoom-in') as HTMLElement).onclick = () => {
     const view = map.getView();
-    const zoom = view.getZoom();
+    const zoom = view.getZoom()!;
     view.setZoom(zoom + 1);
 };
diff --git a/test/animation.ts b/test/animation.ts
index e1c5e41..196ef62 100644
--- a/test/animation.ts
+++ b/test/animation.ts
@@ -117,7 +117,7 @@ onClick('bounce-to-istanbul', () => {
 
 onClick('spin-to-rome', () => {
     // Rotation animation takes the shortest arc, so animate in two parts
-    const center = view.getCenter();
+    const center = view.getCenter()!;
     view.animate(
         {
             center: [center[0] + (rome[0] - center[0]) / 2, center[1] + (rome[1] - center[1]) / 2],
@@ -134,7 +134,7 @@ onClick('spin-to-rome', () => {
 
 function flyTo(location: number[], done: (arg0: boolean) => void) {
     const duration = 2000;
-    const zoom = view.getZoom();
+    const zoom = view.getZoom()!;
     let parts = 2;
     let called = false;
     function callback(complete: boolean) {
diff --git a/test/attributions.ts b/test/attributions.ts
index 1849572..11a16c2 100644
--- a/test/attributions.ts
+++ b/test/attributions.ts
@@ -22,7 +22,7 @@ const map = new Map({
 });
 
 function checkSize() {
-    const small = map.getSize()[0] < 600;
+    const small = map.getSize()![0] < 600;
     attribution.setCollapsible(small);
     attribution.setCollapsed(small);
 }
diff --git a/test/canvas-gradient-pattern.ts b/test/canvas-gradient-pattern.ts
index 56796ec..4055957 100644
--- a/test/canvas-gradient-pattern.ts
+++ b/test/canvas-gradient-pattern.ts
@@ -59,7 +59,7 @@ const style = new Style({
 });
 
 const getStackedStyle = (feature: FeatureLike) => {
-    const id = feature.getId();
+    const id = feature.getId()!;
     fill.setColor(id > 'J' ? gradient : (pattern as CanvasPattern));
     return style;
 };
diff --git a/test/center.ts b/test/center.ts
index c9284a1..87a2b55 100644
--- a/test/center.ts
+++ b/test/center.ts
@@ -99,7 +99,7 @@ centerlausanne.addEventListener(
     () => {
         const feature = source.getFeatures()[1];
         const point = feature.getGeometry() as Point;
-        const size = map.getSize();
+        const size = map.getSize()!;
         view.centerOn(point.getCoordinates(), size, [570, 500]);
     },
     false,
diff --git a/test/custom-interactions.ts b/test/custom-interactions.ts
index 63dc138..cb4f852 100644
--- a/test/custom-interactions.ts
+++ b/test/custom-interactions.ts
@@ -41,7 +41,7 @@ class Drag extends PointerInteraction {
             const deltaX = evt.coordinate[0] - this.coordinate_[0];
             const deltaY = evt.coordinate[1] - this.coordinate_[1];
 
-            const geometry = this.feature_.getGeometry();
+            const geometry = this.feature_.getGeometry()!;
             geometry.translate(deltaX, deltaY);
 
             this.coordinate_[0] = evt.coordinate[0];
diff --git a/test/device-orientation.ts b/test/device-orientation.ts
index 1180252..b1857a3 100644
--- a/test/device-orientation.ts
+++ b/test/device-orientation.ts
@@ -27,8 +27,8 @@ const gn: any = {};
 
 gn.init().then(() => {
     gn.start((event: any) => {
-        const center = view.getCenter();
-        const resolution = view.getResolution();
+        const center = view.getCenter()!;
+        const resolution = view.getResolution()!;
         const alpha = toRadians(event.do.beta);
         const beta = toRadians(event.do.beta);
         const gamma = toRadians(event.do.gamma);
diff --git a/test/export-pdf.ts b/test/export-pdf.ts
index 712c8fb..b3ea21a 100644
--- a/test/export-pdf.ts
+++ b/test/export-pdf.ts
@@ -16,7 +16,7 @@ const feature = format.readFeature(
         '-20.1708984375, 38.814697265625 -35.6396484375, 13.502197265625 ' +
         '-39.1552734375, 10.689697265625 -25.0927734375))',
 );
-feature.getGeometry().transform('EPSG:4326', 'EPSG:3857');
+feature.getGeometry()!.transform('EPSG:4326', 'EPSG:3857');
 
 const vector = new VectorLayer({
     source: new VectorSource({
diff --git a/test/feature-animation.ts b/test/feature-animation.ts
index 91ae292..918c22e 100644
--- a/test/feature-animation.ts
+++ b/test/feature-animation.ts
@@ -49,7 +49,7 @@ function flash(feature: Feature) {
     function animate(event: RenderEvent) {
         const vectorContext = event.vectorContext;
         const frameState = event.frameState;
-        const flashGeom = feature.getGeometry().clone();
+        const flashGeom = feature.getGeometry()!.clone();
         const elapsed = frameState.time - start;
         const elapsedRatio = elapsed / duration;
         // radius will be 5 at start and 30 at end.
diff --git a/test/geojson.ts b/test/geojson.ts
index 225ae7b..d831cbb 100644
--- a/test/geojson.ts
+++ b/test/geojson.ts
@@ -79,7 +79,7 @@ const styles: { [key: string]: Style } = {
 };
 
 const styleFunction = (feature: FeatureLike) => {
-    return styles[feature.getGeometry().getType()];
+    return styles[feature.getGeometry()!.getType()];
 };
 
 const geojsonObject = {
diff --git a/test/geolocation-orientation.ts b/test/geolocation-orientation.ts
index 523bcea..832a922 100644
--- a/test/geolocation-orientation.ts
+++ b/test/geolocation-orientation.ts
@@ -54,7 +54,7 @@ let deltaMean = 500; // the geolocation sampling period mean in ms
 
 // Listen to position changes
 geolocation.on('change', () => {
-    const position = geolocation.getPosition();
+    const position = geolocation.getPosition()!;
     const accuracy = geolocation.getAccuracy();
     const heading = geolocation.getHeading() || 0;
     const speed = geolocation.getSpeed() || 0;
@@ -124,7 +124,7 @@ function addPosition(position: number[], heading: number, m: number, speed: numb
 // recenters the view by putting the given coordinates at 3/4 from the top or
 // the screen
 function getCenterWithHeading(position: number[], rotation: number, resolution: number) {
-    const size = map.getSize();
+    const size = map.getSize()!;
     const height = size[1];
 
     return [
@@ -142,7 +142,7 @@ function updateView() {
     // interpolate position along positions LineString
     const c = positions.getCoordinateAtM(m, true);
     if (c) {
-        view.setCenter(getCenterWithHeading(c, -c[2], view.getResolution()));
+        view.setCenter(getCenterWithHeading(c, -c[2], view.getResolution()!));
         view.setRotation(-c[2]);
         marker.setPosition(c);
     }
diff --git a/test/getfeatureinfo-image.ts b/test/getfeatureinfo-image.ts
index b8c950a..e08d63f 100644
--- a/test/getfeatureinfo-image.ts
+++ b/test/getfeatureinfo-image.ts
@@ -27,7 +27,7 @@ const map = new Map({
 
 map.on('singleclick', evt => {
     (document.getElementById('info') as HTMLElement).innerHTML = '';
-    const viewResolution = view.getResolution();
+    const viewResolution = view.getResolution()!;
     const url = wmsSource.getGetFeatureInfoUrl(evt.coordinate, viewResolution, 'EPSG:3857', {
         INFO_FORMAT: 'text/html',
     });
diff --git a/test/getfeatureinfo-tile.ts b/test/getfeatureinfo-tile.ts
index 3868bef..ff3dd92 100644
--- a/test/getfeatureinfo-tile.ts
+++ b/test/getfeatureinfo-tile.ts
@@ -27,7 +27,7 @@ const map = new Map({
 
 map.on('singleclick', evt => {
     (document.getElementById('info') as HTMLElement).innerHTML = '';
-    const viewResolution = view.getResolution();
+    const viewResolution = view.getResolution()!;
     const url = wmsSource.getGetFeatureInfoUrl(evt.coordinate, viewResolution, 'EPSG:3857', {
         INFO_FORMAT: 'text/html',
     });
diff --git a/test/gpx.ts b/test/gpx.ts
index 96f3261..d3ef302 100644
--- a/test/gpx.ts
+++ b/test/gpx.ts
@@ -48,7 +48,7 @@ const vector = new VectorLayer({
         format: new GPX(),
     }),
     style: feature => {
-        return style[feature.getGeometry().getType()];
+        return style[feature.getGeometry()!.getType()];
     },
 });
 
diff --git a/test/igc.ts b/test/igc.ts
index c876735..51e7317 100644
--- a/test/igc.ts
+++ b/test/igc.ts
@@ -105,7 +105,7 @@ const displaySnap = (coordinate: Coordinate) => {
         line = null as any;
         info.innerHTML = '&nbsp;';
     } else {
-        const geometry = closestFeature.getGeometry();
+        const geometry = closestFeature.getGeometry()!;
         const closestPoint = geometry.getClosestPoint(coordinate);
         if (point === null) {
             point = new Point(closestPoint);
diff --git a/test/layer-clipping.ts b/test/layer-clipping.ts
index f766df4..bd51b2a 100644
--- a/test/layer-clipping.ts
+++ b/test/layer-clipping.ts
@@ -20,7 +20,7 @@ osm.on('precompose', event => {
     const ctx = event.context;
     ctx.save();
     const pixelRatio = event.frameState.pixelRatio;
-    const size = map.getSize();
+    const size = map.getSize()!;
     ctx.translate((size[0] / 2) * pixelRatio, (size[1] / 2) * pixelRatio);
     ctx.scale(3 * pixelRatio, 3 * pixelRatio);
     ctx.translate(-75, -80);
diff --git a/test/measure.ts b/test/measure.ts
index 280ae2d..30105d8 100644
--- a/test/measure.ts
+++ b/test/measure.ts
@@ -143,7 +143,7 @@ function addInteraction() {
 
         let tooltipCoord = (evt as any).coordinate;
 
-        listener = sketch.getGeometry().on('change', ev => {
+        listener = sketch.getGeometry()!.on('change', ev => {
             const geom = ev.target;
             let output;
             if (geom instanceof Polygon) {
diff --git a/test/modify-test.ts b/test/modify-test.ts
index 1592dc5..5b0f4c3 100644
--- a/test/modify-test.ts
+++ b/test/modify-test.ts
@@ -50,7 +50,7 @@ const styleFunction = (() => {
         image,
     });
     return (feature => {
-        return styles[feature.getGeometry().getType()] || styles['default'];
+        return styles[feature.getGeometry()!.getType()] || styles['default'];
     }) as StyleFunction;
 })();
 
@@ -216,7 +216,7 @@ const overlayStyle = (() => {
     styles['GeometryCollection'] = (styles['Polygon'] as Style[]).concat(styles['Point'] as Style[]);
 
     return (feature => {
-        return styles[feature.getGeometry().getType()];
+        return styles[feature.getGeometry()!.getType()];
     }) as StyleFunction;
 })();
 
@@ -234,7 +234,7 @@ const modify = new Modify({
             .getArray()
             .every(feature => {
                 return !!feature
-                    .getGeometry()
+                    .getGeometry()!
                     .getType()
                     .match(/Polygon/);
             });
diff --git a/test/ol-tests.ts b/test/ol-tests.ts
index dc281b8..2568a69 100644
--- a/test/ol-tests.ts
+++ b/test/ol-tests.ts
@@ -103,7 +103,7 @@ const styles: { [key: string]: Style } = {
     }),
 };
 
-const styleFunction: StyleFunction = feature => styles[feature.getGeometry().getType()];
+const styleFunction: StyleFunction = feature => styles[feature.getGeometry()!.getType()];
 
 /**
  * ==================================================
diff --git a/test/permalink.ts b/test/permalink.ts
index 44cfec2..12f2009 100644
--- a/test/permalink.ts
+++ b/test/permalink.ts
@@ -42,7 +42,7 @@ const updatePermalink = () => {
         return;
     }
 
-    const center_ = view.getCenter();
+    const center_ = view.getCenter()!;
     const hash =
         '#map=' +
         view.getZoom() +
diff --git a/test/synthetic-points.ts b/test/synthetic-points.ts
index 4545b44..fcd6bea 100644
--- a/test/synthetic-points.ts
+++ b/test/synthetic-points.ts
@@ -63,7 +63,7 @@ const displaySnap = (coordinate: Coordinate) => {
         point = null;
         line = null;
     } else {
-        const geometry = closestFeature.getGeometry();
+        const geometry = closestFeature.getGeometry()!;
         const closestPoint = geometry.getClosestPoint(coordinate);
         if (point === null) {
             point = new Point(closestPoint);
diff --git a/test/turf.ts b/test/turf.ts
index bfca3cd..9b874cd 100644
--- a/test/turf.ts
+++ b/test/turf.ts
@@ -30,11 +30,11 @@ fetch('data/geojson/roads-seoul.geojson')
 
             // convert the generated point to a OpenLayers feature
             const marker = format.readFeature(turfPoint);
-            marker.getGeometry().transform('EPSG:4326', 'EPSG:3857');
+            marker.getGeometry()!.transform('EPSG:4326', 'EPSG:3857');
             source.addFeature(marker);
         }
 
-        street.getGeometry().transform('EPSG:4326', 'EPSG:3857');
+        street.getGeometry()!.transform('EPSG:4326', 'EPSG:3857');
         source.addFeature(street);
     });
 const vectorLayer = new VectorLayer({
diff --git a/test/utfgrid.ts b/test/utfgrid.ts
index 275d7dc..29dfadb 100644
--- a/test/utfgrid.ts
+++ b/test/utfgrid.ts
@@ -44,7 +44,7 @@ const infoOverlay = new Overlay({
 map.addOverlay(infoOverlay);
 
 const displayCountryInfo = (coordinate: Coordinate) => {
-    const viewResolution = view.getResolution();
+    const viewResolution = view.getResolution()!;
     gridSource.forDataAtCoordinateAndResolution(coordinate, viewResolution, data => {
         // If you want to use the template from the TileJSON,
         //  load the mustache.js library separately and call
diff --git a/test/vector-esri-edit.ts b/test/vector-esri-edit.ts
index cd4415f..e1ef337 100644
--- a/test/vector-esri-edit.ts
+++ b/test/vector-esri-edit.ts
@@ -119,7 +119,7 @@ selected.on('add', evt => {
 
 selected.on('remove', evt => {
     const feature = evt.element;
-    const fid = feature.getId();
+    const fid = feature.getId()!;
     if (dirty[fid] === true) {
         const payload =
             '[' +
diff --git a/test/vector-label-decluttering.ts b/test/vector-label-decluttering.ts
index 2df0ebe..9e5ace4 100644
--- a/test/vector-label-decluttering.ts
+++ b/test/vector-label-decluttering.ts
@@ -17,7 +17,7 @@ const map = new Map({
 
 const labelStyle = new Style({
     geometry: feature => {
-        let geometry = feature.getGeometry();
+        let geometry = feature.getGeometry()!;
         if (geometry.getType() === 'MultiPolygon') {
             // Only render label for the widest polygon of a multipolygon
             const polygons = (geometry as MultiPolygon).getPolygons();
